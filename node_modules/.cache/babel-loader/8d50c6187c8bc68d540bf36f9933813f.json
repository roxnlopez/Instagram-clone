{"ast":null,"code":"import _taggedTemplateLiteral from \"C:\\\\Users\\\\lopezro\\\\Instagram-clone\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n\\t        {\\n\\t          posts(user_id: \\\"a\\\"){\\n\\t            id\\n\\t            user{\\n\\t              nickname\\n\\t              avatar\\n\\t            }\\n\\t            image\\n\\t            caption\\n\\t          }\\n\\t        }\\n\\t      \"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from \"react\";\nimport \"./Posts.css\";\nimport { Query } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport Post from \"../Post\";\n\nclass Posts extends Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = () => {\n      this.props.apollo_client.query({\n        query: gql(_templateObject())\n      }).then(({\n        data\n      }) => {\n        console.log('me!', data.posts);\n        this.setState({\n          posts: data.posts\n        });\n      });\n    };\n\n    this.render = () => {\n      return 0;\n    };\n\n    this.state = {\n      posts: []\n    };\n  }\n\n}\n\nexport default Posts; //  return (\n//    <Query\n//       this.props.apollo_client.query({gql:`\n//         {\n//           posts(user_id: \"a\"){\n//             id\n//             user{\n//               nickname\n//               avatar\n//             }\n//             image\n//             caption\n//           }\n//         }\n//       `}\n//     >\n//     {({loading, error, data}) => {\n//     \tif (loading) return <p>Loading Posts...</p>;\n//     \tif (error) return <p>Error Fetching Posts...</p>;\n//     \tlet posts = data.posts;\n// \t    return (<div className=\"Posts\">\n// \t\t      {posts.map(post => <Post nickname={post.user.nickname} avatar={post.user.avatar} image={post.image} caption={post.caption} key={post.id}/>)}\n// \t\t    </div>);\n// \t\t    }}\n// \t    </Query>\n// \t  \t);  \n// }\n// }","map":{"version":3,"sources":["C:\\Users\\lopezro\\Instagram-clone\\src\\components\\Posts\\index.js"],"names":["React","Component","Query","gql","Post","Posts","constructor","props","componentDidMount","apollo_client","query","then","data","console","log","posts","setState","render","state"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,aAAP;AACA,SAASC,KAAT,QAAsB,cAAtB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,IAAP,MAAiB,SAAjB;;AAEA,MAAMC,KAAN,SAAoBJ,SAApB,CAA8B;AAC7BK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAClB,UAAMA,KAAN;;AADkB,SAKnBC,iBALmB,GAKC,MAAM;AACzB,WAAKD,KAAL,CAAWE,aAAX,CAAyBC,KAAzB,CAA+B;AAACA,QAAAA,KAAK,EAAEP,GAAF;AAAN,OAA/B,EAaCQ,IAbD,CAaM,CAAC;AAACC,QAAAA;AAAD,OAAD,KAAY;AACjBC,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBF,IAAI,CAACG,KAAxB;AACA,aAAKC,QAAL,CAAc;AAAED,UAAAA,KAAK,EAAEH,IAAI,CAACG;AAAd,SAAd;AACA,OAhBD;AAiBA,KAvBkB;;AAAA,SAyBnBE,MAzBmB,GAyBV,MAAM;AACd,aAAO,CAAP;AACA,KA3BkB;;AAElB,SAAKC,KAAL,GAAa;AAAEH,MAAAA,KAAK,EAAE;AAAT,KAAb;AACA;;AAJ4B;;AA+B9B,eAAeV,KAAf,C,CAGC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Posts.css\";\r\nimport { Query } from \"react-apollo\";\r\nimport gql from \"graphql-tag\";\r\nimport Post from \"../Post\";\r\n\r\nclass Posts extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = { posts: [] };\r\n\t}\t\r\n\r\n\tcomponentDidMount = () => {\r\n\t\tthis.props.apollo_client.query({query: gql`\r\n\t        {\r\n\t          posts(user_id: \"a\"){\r\n\t            id\r\n\t            user{\r\n\t              nickname\r\n\t              avatar\r\n\t            }\r\n\t            image\r\n\t            caption\r\n\t          }\r\n\t        }\r\n\t      `})\r\n\t\t.then(({data}) => {\r\n\t\t\tconsole.log('me!', data.posts)\r\n\t\t\tthis.setState({ posts: data.posts })\r\n\t\t})\r\n\t}\r\n\r\n\trender = () => {\r\n\t\treturn 0\r\n\t}\r\n}\r\n\r\nexport default Posts;\r\n\r\n\r\n\t//  return (\r\n //    <Query\r\n\t//       this.props.apollo_client.query({gql:`\r\n\t//         {\r\n\t//           posts(user_id: \"a\"){\r\n\t//             id\r\n\t//             user{\r\n\t//               nickname\r\n\t//               avatar\r\n\t//             }\r\n\t//             image\r\n\t//             caption\r\n\t//           }\r\n\t//         }\r\n\t//       `}\r\n\t//     >\r\n\r\n\t//     {({loading, error, data}) => {\r\n\r\n\t//     \tif (loading) return <p>Loading Posts...</p>;\r\n\t//     \tif (error) return <p>Error Fetching Posts...</p>;\r\n\t//     \tlet posts = data.posts;\r\n\r\n\t// \t    return (<div className=\"Posts\">\r\n\t// \t\t      {posts.map(post => <Post nickname={post.user.nickname} avatar={post.user.avatar} image={post.image} caption={post.caption} key={post.id}/>)}\r\n\t// \t\t    </div>);\r\n\t// \t\t    }}\r\n\t// \t    </Query>\r\n\t// \t  \t);  \r\n\t// }\r\n\r\n // }"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _taggedTemplateLiteral from \"C:\\\\Users\\\\lopezro\\\\Instagram-clone\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"C:\\\\Users\\\\lopezro\\\\Instagram-clone\\\\src\\\\components\\\\Posts\\\\index.js\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n            {\\n              posts(user_id: \\\"a\\\") {\\n                id\\n                user {\\n                  nickname\\n                  avatar\\n                }\\n                image\\n                caption\\n              }\\n            }\\n          \"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from \"react\";\nimport \"./Posts.css\";\nimport gql from \"graphql-tag\";\nimport Post from \"../Post\";\nimport Notifier from \"../Notifier\";\n\nclass Posts extends Component {\n  constructor() {\n    super();\n    this.state = {\n      posts: []\n    };\n    this.offline = !navigator.onLine;\n  }\n\n  componentDidMount() {\n    // request permission\n    Notification.requestPermission();\n\n    if (this.offline) {\n      this.setState({\n        posts: JSON.parse(localStorage.getItem(\"posts\"))\n      });\n    } else {\n      // fetch the initial posts\n      this.props.apollo_client.query({\n        query: gql(_templateObject())\n      }).then(response => {\n        this.setState({\n          posts: response.data.posts\n        });\n        localStorage.setItem(\"posts\", JSON.stringify(response.data.posts));\n      });\n    } //  subscribe to posts channel\n\n\n    this.posts_channel = this.props.pusher.subscribe(\"posts-channel\"); // listen for a new post\n\n    this.posts_channel.bind(\"new-post\", data => {\n      this.setState({\n        posts: this.state.posts.concat(data.post)\n      }); // check for notifications\n\n      if (Notification.permission === \"granted\") {\n        try {\n          // notify user of new post\n          let notification = new Notification(\"Pusher Instagram Clone\", {\n            body: \"New post from \".concat(data.post.user.nickname),\n            icon: \"https://img.stackshare.io/service/115/Pusher_logo.png\",\n            image: \"\".concat(data.post.image)\n          });\n\n          notification.onclick = function (event) {\n            window.open(\"http://localhost:3000\", \"_blank\");\n          };\n        } catch (e) {\n          console.log(\"Error displaying notification\");\n        }\n      }\n    }, this);\n  }\n\n  render() {\n    const notify = this.offline ? React.createElement(Notifier, {\n      data: \"Instagram Clone: Offline Mode\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }) : React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    });\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, notify, React.createElement(\"div\", {\n      className: \"Posts\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, this.state.posts.slice(0).reverse().map(post => React.createElement(Post, {\n      nickname: post.user.nickname,\n      avatar: post.user.avatar,\n      image: post.image,\n      caption: post.caption,\n      key: post.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default Posts; // import React, { Component } from \"react\";\n// import \"../Posts.css\";\n// import { Query } from \"react-apollo\";\n// import gql from \"graphql-tag\";\n// import Post from \"../Post\";\n// class Posts extends Component {\n// \tcontructor(props) {\n// \t\tsuper(props);\n// \t\tthis.state = { posts: [] };\n// \t}\t\n// \trender = () => {\n// \t\t return (\n//     <Query\n// \t      this.props.apollo_client.query({gql:`\n// \t        {\n// \t          posts(user_id: \"a\"){\n// \t            id\n// \t            user{\n// \t              nickname\n// \t              avatar\n// \t            }\n// \t            image\n// \t            caption\n// \t          }\n// \t        }\n// \t      `})\n// \t    >\n// \t    {({loading, error, data}) => {\n// \t    \tif (loading) return <p>Loading Posts...</p>;\n// \t    \tif (error) return <p>Error Fetching Posts...</p>;\n// \t    \tlet posts = data.posts;\n// \t\t    return (\t<div className=\"Posts\">\n// \t\t\t\t      \t\t\t{posts.map(post => <Post \n// \t\t\t\t      \t\t\t\t\t\t\t\t\t\t\t\t\t\tnickname={post.user.nickname} \n// \t\t\t\t      \t\t\t\t\t\t\t\t\t\t\t\t\t\tavatar={post.user.avatar} \n// \t\t\t\t      \t\t\t\t\t\t\t\t\t\t\t\t\t\timage={post.image} \n// \t\t\t\t      \t\t\t\t\t\t\t\t\t\t\t\t\t\tcaption={post.caption} \n// \t\t\t\t      \t\t\t\t\t\t\t\t\t\t\t\t\t\tkey={post.id}\n// \t\t\t      \t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n// \t\t\t      \t\t\t\t)} \n// \t\t\t\t      \t\t</div>)\n//     \t)}}\n// \t\t</Query>\n// \t\t);  \n// \t}\n//  }\n// }\n// export default Posts;","map":{"version":3,"sources":["C:\\Users\\lopezro\\Instagram-clone\\src\\components\\Posts\\index.js"],"names":["React","Component","gql","Post","Notifier","Posts","constructor","state","posts","offline","navigator","onLine","componentDidMount","Notification","requestPermission","setState","JSON","parse","localStorage","getItem","props","apollo_client","query","then","response","data","setItem","stringify","posts_channel","pusher","subscribe","bind","concat","post","permission","notification","body","user","nickname","icon","image","onclick","event","window","open","e","console","log","render","notify","slice","reverse","map","avatar","caption","id"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\r\nimport \"./Posts.css\";\r\nimport gql from \"graphql-tag\";\r\nimport Post from \"../Post\";\r\nimport Notifier from \"../Notifier\";\r\n\r\nclass Posts extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      posts: []\r\n    };\r\n    this.offline = !navigator.onLine;\r\n  }\r\n  componentDidMount() {\r\n    // request permission\r\n    Notification.requestPermission();\r\n\r\n    if (this.offline) {\r\n      this.setState({ posts: JSON.parse(localStorage.getItem(\"posts\")) });\r\n    } else {\r\n      // fetch the initial posts\r\n      this.props.apollo_client\r\n        .query({\r\n          query: gql`\r\n            {\r\n              posts(user_id: \"a\") {\r\n                id\r\n                user {\r\n                  nickname\r\n                  avatar\r\n                }\r\n                image\r\n                caption\r\n              }\r\n            }\r\n          `\r\n        })\r\n        .then(response => {\r\n          this.setState({ posts: response.data.posts });\r\n          localStorage.setItem(\"posts\", JSON.stringify(response.data.posts));\r\n        });\r\n    }\r\n    //  subscribe to posts channel\r\n    this.posts_channel = this.props.pusher.subscribe(\"posts-channel\");\r\n\r\n    // listen for a new post\r\n    this.posts_channel.bind(\r\n      \"new-post\",\r\n      data => {\r\n        this.setState({ posts: this.state.posts.concat(data.post) });\r\n\r\n        // check for notifications\r\n        if (Notification.permission === \"granted\") {\r\n          try {\r\n            // notify user of new post\r\n            let notification = new Notification(\"Pusher Instagram Clone\", {\r\n              body: `New post from ${data.post.user.nickname}`,\r\n              icon: \"https://img.stackshare.io/service/115/Pusher_logo.png\",\r\n              image: `${data.post.image}`\r\n            });\r\n\r\n            notification.onclick = function(event) {\r\n              window.open(\"http://localhost:3000\", \"_blank\");\r\n            };\r\n          } catch (e) {\r\n            console.log(\"Error displaying notification\");\r\n          }\r\n        }\r\n      },\r\n      this\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const notify = this.offline ? <Notifier data=\"Instagram Clone: Offline Mode\" /> : <span />;\r\n    return (\r\n      <div>\r\n        {notify}\r\n        <div className=\"Posts\">\r\n          {this.state.posts\r\n            .slice(0)\r\n            .reverse()\r\n            .map(post => (\r\n              <Post\r\n                nickname={post.user.nickname}\r\n                avatar={post.user.avatar}\r\n                image={post.image}\r\n                caption={post.caption}\r\n                key={post.id}\r\n              />\r\n            ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Posts;\r\n\r\n\r\n\r\n\r\n// import React, { Component } from \"react\";\r\n// import \"../Posts.css\";\r\n// import { Query } from \"react-apollo\";\r\n// import gql from \"graphql-tag\";\r\n// import Post from \"../Post\";\r\n\r\n// class Posts extends Component {\r\n// \tcontructor(props) {\r\n// \t\tsuper(props);\r\n// \t\tthis.state = { posts: [] };\r\n// \t}\t\r\n\r\n// \trender = () => {\r\n// \t\t return (\r\n//     <Query\r\n// \t      this.props.apollo_client.query({gql:`\r\n// \t        {\r\n// \t          posts(user_id: \"a\"){\r\n// \t            id\r\n// \t            user{\r\n// \t              nickname\r\n// \t              avatar\r\n// \t            }\r\n// \t            image\r\n// \t            caption\r\n// \t          }\r\n// \t        }\r\n// \t      `})\r\n// \t    >\r\n\r\n// \t    {({loading, error, data}) => {\r\n\r\n// \t    \tif (loading) return <p>Loading Posts...</p>;\r\n// \t    \tif (error) return <p>Error Fetching Posts...</p>;\r\n// \t    \tlet posts = data.posts;\r\n\r\n// \t\t    return (\t<div className=\"Posts\">\r\n// \t\t\t\t      \t\t\t{posts.map(post => <Post \r\n// \t\t\t\t      \t\t\t\t\t\t\t\t\t\t\t\t\t\tnickname={post.user.nickname} \r\n// \t\t\t\t      \t\t\t\t\t\t\t\t\t\t\t\t\t\tavatar={post.user.avatar} \r\n// \t\t\t\t      \t\t\t\t\t\t\t\t\t\t\t\t\t\timage={post.image} \r\n// \t\t\t\t      \t\t\t\t\t\t\t\t\t\t\t\t\t\tcaption={post.caption} \r\n// \t\t\t\t      \t\t\t\t\t\t\t\t\t\t\t\t\t\tkey={post.id}\r\n// \t\t\t      \t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n// \t\t\t      \t\t\t\t)} \r\n// \t\t\t\t      \t\t</div>)\r\n//     \t)}}\r\n// \t\t</Query>\r\n// \t\t);  \r\n// \t}\r\n//  }\r\n// }\r\n\r\n// export default Posts;\r\n"]},"metadata":{},"sourceType":"module"}